// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: .proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuyersAndShopsClient is the client API for BuyersAndShops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuyersAndShopsClient interface {
	CreateBuyer(ctx context.Context, in *Buyer, opts ...grpc.CallOption) (*Status, error)
	CreateShop(ctx context.Context, in *Shop, opts ...grpc.CallOption) (*Status, error)
	GetBuyer(ctx context.Context, in *Buyer, opts ...grpc.CallOption) (*Buyer, error)
	GetShop(ctx context.Context, in *Shop, opts ...grpc.CallOption) (*Shop, error)
	DeleteBuyer(ctx context.Context, in *Buyer, opts ...grpc.CallOption) (*Status, error)
	DeleteShop(ctx context.Context, in *Shop, opts ...grpc.CallOption) (*Status, error)
}

type buyersAndShopsClient struct {
	cc grpc.ClientConnInterface
}

func NewBuyersAndShopsClient(cc grpc.ClientConnInterface) BuyersAndShopsClient {
	return &buyersAndShopsClient{cc}
}

func (c *buyersAndShopsClient) CreateBuyer(ctx context.Context, in *Buyer, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/BuyersAndShops/CreateBuyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyersAndShopsClient) CreateShop(ctx context.Context, in *Shop, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/BuyersAndShops/CreateShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyersAndShopsClient) GetBuyer(ctx context.Context, in *Buyer, opts ...grpc.CallOption) (*Buyer, error) {
	out := new(Buyer)
	err := c.cc.Invoke(ctx, "/BuyersAndShops/GetBuyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyersAndShopsClient) GetShop(ctx context.Context, in *Shop, opts ...grpc.CallOption) (*Shop, error) {
	out := new(Shop)
	err := c.cc.Invoke(ctx, "/BuyersAndShops/GetShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyersAndShopsClient) DeleteBuyer(ctx context.Context, in *Buyer, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/BuyersAndShops/DeleteBuyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyersAndShopsClient) DeleteShop(ctx context.Context, in *Shop, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/BuyersAndShops/DeleteShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuyersAndShopsServer is the server API for BuyersAndShops service.
// All implementations must embed UnimplementedBuyersAndShopsServer
// for forward compatibility
type BuyersAndShopsServer interface {
	CreateBuyer(context.Context, *Buyer) (*Status, error)
	CreateShop(context.Context, *Shop) (*Status, error)
	GetBuyer(context.Context, *Buyer) (*Buyer, error)
	GetShop(context.Context, *Shop) (*Shop, error)
	DeleteBuyer(context.Context, *Buyer) (*Status, error)
	DeleteShop(context.Context, *Shop) (*Status, error)
	mustEmbedUnimplementedBuyersAndShopsServer()
}

// UnimplementedBuyersAndShopsServer must be embedded to have forward compatible implementations.
type UnimplementedBuyersAndShopsServer struct {
}

func (UnimplementedBuyersAndShopsServer) CreateBuyer(context.Context, *Buyer) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuyer not implemented")
}
func (UnimplementedBuyersAndShopsServer) CreateShop(context.Context, *Shop) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShop not implemented")
}
func (UnimplementedBuyersAndShopsServer) GetBuyer(context.Context, *Buyer) (*Buyer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyer not implemented")
}
func (UnimplementedBuyersAndShopsServer) GetShop(context.Context, *Shop) (*Shop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShop not implemented")
}
func (UnimplementedBuyersAndShopsServer) DeleteBuyer(context.Context, *Buyer) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuyer not implemented")
}
func (UnimplementedBuyersAndShopsServer) DeleteShop(context.Context, *Shop) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShop not implemented")
}
func (UnimplementedBuyersAndShopsServer) mustEmbedUnimplementedBuyersAndShopsServer() {}

// UnsafeBuyersAndShopsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuyersAndShopsServer will
// result in compilation errors.
type UnsafeBuyersAndShopsServer interface {
	mustEmbedUnimplementedBuyersAndShopsServer()
}

func RegisterBuyersAndShopsServer(s grpc.ServiceRegistrar, srv BuyersAndShopsServer) {
	s.RegisterService(&BuyersAndShops_ServiceDesc, srv)
}

func _BuyersAndShops_CreateBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Buyer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyersAndShopsServer).CreateBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BuyersAndShops/CreateBuyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyersAndShopsServer).CreateBuyer(ctx, req.(*Buyer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyersAndShops_CreateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyersAndShopsServer).CreateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BuyersAndShops/CreateShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyersAndShopsServer).CreateShop(ctx, req.(*Shop))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyersAndShops_GetBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Buyer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyersAndShopsServer).GetBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BuyersAndShops/GetBuyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyersAndShopsServer).GetBuyer(ctx, req.(*Buyer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyersAndShops_GetShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyersAndShopsServer).GetShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BuyersAndShops/GetShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyersAndShopsServer).GetShop(ctx, req.(*Shop))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyersAndShops_DeleteBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Buyer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyersAndShopsServer).DeleteBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BuyersAndShops/DeleteBuyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyersAndShopsServer).DeleteBuyer(ctx, req.(*Buyer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyersAndShops_DeleteShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyersAndShopsServer).DeleteShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BuyersAndShops/DeleteShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyersAndShopsServer).DeleteShop(ctx, req.(*Shop))
	}
	return interceptor(ctx, in, info, handler)
}

// BuyersAndShops_ServiceDesc is the grpc.ServiceDesc for BuyersAndShops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuyersAndShops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BuyersAndShops",
	HandlerType: (*BuyersAndShopsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuyer",
			Handler:    _BuyersAndShops_CreateBuyer_Handler,
		},
		{
			MethodName: "CreateShop",
			Handler:    _BuyersAndShops_CreateShop_Handler,
		},
		{
			MethodName: "GetBuyer",
			Handler:    _BuyersAndShops_GetBuyer_Handler,
		},
		{
			MethodName: "GetShop",
			Handler:    _BuyersAndShops_GetShop_Handler,
		},
		{
			MethodName: "DeleteBuyer",
			Handler:    _BuyersAndShops_DeleteBuyer_Handler,
		},
		{
			MethodName: "DeleteShop",
			Handler:    _BuyersAndShops_DeleteShop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: ".proto",
}
